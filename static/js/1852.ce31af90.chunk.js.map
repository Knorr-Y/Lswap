{"version":3,"file":"static/js/1852.ce31af90.chunk.js","mappings":"uVAMMA,EAAoBC,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,uDAM9BE,EAAwBF,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,yIAOD,SAAAG,GAAA,IAAGC,EAAKD,EAALC,MAAK,SAAAC,OAAUD,EAAME,WAAWC,GAAE,SAKtEC,GAAmBR,EAAAA,EAAAA,SAAOS,EAAAA,EAAAA,KAAMC,WAAA,CAAAT,YAAA,eAAbD,CAAa,sMASJ,SAAAW,GAAQ,OAAAA,EAALP,MAAkBE,WAAWC,EAAE,IAK9DK,EAAmBZ,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,8LAExB,SAAAa,GAAQ,OAAAA,EAALT,MAAkBU,WAAW,IAOJ,SAAAC,GAAA,IAAGX,EAAKW,EAALX,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAK7D,SAAAC,GAAQ,OAAAA,EAALb,MAAkBc,QAAQC,KAAK,IAU3CC,EAAiB,IAEVC,EAAW,SAAHC,GAAmE,IAA7DC,EAAQD,EAARC,SAAUC,EAAWF,EAAXE,YAAaC,EAAeH,EAAfG,gBAC1CC,GAAMC,EAAAA,EAAAA,cAAY,SAACC,GAAS,IAAEC,EAACC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGP,EAASQ,OAAM,OAAKE,EAAAA,EAAAA,IAAmBL,EAAGC,EAAE,GAAE,CAACN,IACjFW,GAASP,EAAAA,EAAAA,cACb,SAACQ,EAAWC,EAAkBC,GAAmB,OAAKC,EAAAA,EAAAA,GAAwBH,EAAGC,EAAUC,EAAaX,EAAI,GAC5G,CAACA,IAEHa,GAAuBC,EAAAA,EAAAA,YAAWjB,EAASQ,QAAQ,SAACI,GAAC,MAAM,CACzDP,GAAIO,EAAIZ,EAASQ,OAAS,EAAII,GAAK,GAAKf,EACzC,IAAEqB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAFII,EAAOF,EAAA,GAAEG,EAAGH,EAAA,GAGbI,GAAOC,EAAAA,EAAAA,QAAO,CAAC,EAAG,IAElBC,GAAapB,EAAAA,EAAAA,cACjB,SAACqB,EAAWC,GACV,IAAMb,EAAWV,EAAIwB,KAAKC,MAAMH,EAAI5B,GAAkBG,EAASQ,QACzDM,EAAcY,EAAK,EAAI1B,EAASQ,OAAS,EAAI,EACnDa,GAAI,SAACT,GACH,IAAMiB,EAAWlB,EAAOC,EAAGC,EAAUC,GAC/BgB,EAAenB,EAAOC,EAAGU,EAAKS,QAAQ,GAAIT,EAAKS,QAAQ,IACvDC,GAAOC,EAAAA,EAAAA,IAAcpB,EAAUC,EAAae,EAAU7B,EAASQ,OAAQiB,GAC7E,MAAO,CACLpB,GAAKoB,GAAK5B,EAAiBG,EAASQ,QAAWX,EAAiBmC,EAChEE,UAAWR,EAAK,EAAII,EAAeD,EAAWC,EAAeD,EAC7DM,OAAQ,CAAEC,QAAS,IAAKC,SAAU,IAEtC,IACAf,EAAKS,QAAU,CAAClB,EAAUC,EAC5B,GACA,CAACX,EAAKQ,EAAQU,EAAKrB,EAASQ,SAGxB8B,GAAYf,EAAAA,EAAAA,QAAO,IAEzBgB,EAAAA,EAAAA,YAAU,WACRf,EAAWvB,EAAcJ,EAAgByC,EAAUP,QACrD,GAAG,CAAC9B,EAAauB,IAEjB,IAAMgB,GAAcpC,EAAAA,EAAAA,cAClB,SAACqC,GACCH,EAAUP,QAAUU,EACpBvC,EAAgBuC,EAClB,GACA,CAACvC,IAYH,OATAqC,EAAAA,EAAAA,YAAU,WACR,IAAMG,EAAWC,aAAWC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAA3B,KAAA2B,EAAAR,MAAA,OAC3BD,EAAY,GAAE,wBAAAS,EAAAC,OAAA,GAAAH,EAAA,KACb,KACH,OAAO,WACLI,cAAcT,EAChB,CACF,GAAG,CAACF,EAAavC,KAGfmD,EAAAA,EAAAA,MAAC5E,EAAiB,CAAAwB,SAAA,EAChBqD,EAAAA,EAAAA,KAAChE,EAAgB,CAACiE,QAAS,kBAAMd,GAAa,EAAE,EAACxC,UAC/CqD,EAAAA,EAAAA,KAACE,EAAAA,GAAe,CAACC,MAAM,OAAOC,OAAO,YAEvCJ,EAAAA,EAAAA,KAAC1E,EAAqB,CAAAqB,SACnBoB,EAAQsC,KAAI,SAAAC,EAAQ/C,GAAC,IAANP,EAACsD,EAADtD,EAAC,OACfgD,EAAAA,EAAAA,KAACpE,EAAgB,CAAS2E,MAAO,CAAEvD,EAAAA,GAAIL,SACpCA,EAASY,IADWA,EAEJ,OAGvByC,EAAAA,EAAAA,KAAChE,EAAgB,CAACiE,QAAS,kBAAMd,EAAY,EAAE,EAACxC,UAC9CqD,EAAAA,EAAAA,KAACQ,EAAAA,GAAgB,CAACL,MAAM,OAAOC,OAAO,aAI9C,EAEaK,EAAkB,SAAHC,GAAA,IAAM/D,EAAQ+D,EAAR/D,SAAQ,OACxCqD,EAAAA,EAAAA,KAACvD,EAAQ,CAACG,YAAa,EAAGC,gBAAiB,WAAe,EAACF,SACxD,CAACA,IACO,E,uFCjIPgE,EAAqBvF,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,8bAOZ,SAAAG,GAAQ,OAAAA,EAALC,MAAkBoF,WAAWC,SAASC,IAAI,IACtC,SAAA/E,GAAQ,OAAAA,EAALP,MAAkBoF,WAAWG,OAAOC,KAAK,IAGpD,SAAA/E,GAAQ,OAAAA,EAALT,MAAkByF,iBAAiB,IAa5C,SAAA9E,GAAQ,OAAAA,EAALX,MAAkB0F,UAAU,IAEtB,SAAA7E,GAAQ,OAAAA,EAALb,MAAkBoF,WAAWC,SAASC,IAAI,IACtC,SAAApE,GAAQ,OAAAA,EAALlB,MAAkBoF,WAAWG,OAAOC,KAAK,IAQxEG,EAAsB/F,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,8FAEhB,SAAAgG,GAAA,IAAGC,EAAGD,EAAHC,IAAG,aAAA5F,OAAc4F,EAAG,QAKvCC,EAA6BlG,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,+LAE9BmG,EAAAA,IAIT,SAAAjB,GAAQ,OAAAA,EAAL9E,MAAkBgG,qBAAqB,IAC1C,SAAAd,GAAQ,OAAAA,EAALlF,MAAkByF,iBAAiB,IACtC,SAAAQ,GAAQ,OAAAA,EAALjG,MAAkBgG,qBAAqB,IAM1CE,EAAmBtG,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,0JAY7BuG,EAAgBvG,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,gEAK1BwG,EAA0BxG,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,oJAUpCyG,GAAiCzG,EAAAA,EAAAA,SAAO0G,EAAAA,GAAchG,WAAA,CAAAT,YAAA,gBAArBD,CAAqB,gBAItD2G,EAAgB3G,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,gNAe1B4G,EAAkB5G,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,qFAGlB,SAAA6G,GAAQ,OAAAA,EAALzG,MAAkB0G,sBAAsB,IACrC,SAAAC,GAAQ,OAAAA,EAAL3G,MAAkB0G,sBAAsB,IAI3DE,EAAyBhH,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,wNAI1BmG,EAAAA,IAIT,SAAAc,GAAQ,OAAAA,EAAL7G,MAAkBgG,qBAAqB,IAC1C,SAAAc,GAAQ,OAAAA,EAAL9G,MAAkByF,iBAAiB,IACtC,SAAAsB,GAAQ,OAAAA,EAAL/G,MAAkBgG,qBAAqB,IAM1CgB,GAAsBpH,EAAAA,EAAAA,SAAO0G,EAAAA,GAAchG,WAAA,CAAAT,YAAA,iBAArBD,CAAqB,iBAI3CqH,EAAerH,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,iBAAVD,CAAU,8CAMzBsH,EAAyBtH,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,iBAAVD,CAAU,MAEnCuH,EAAsBvH,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,iBAAVD,CAAU,8FAQhCwH,EAAkBxH,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,iBAAVD,CAAU,6BAK5BE,EAAwBF,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,iBAAVD,CAAU,sYAGlB,SAAAyH,GAAQ,OAAAA,EAALrH,MAAkBsH,iBAAiB,IACtC,SAAAC,GAAQ,OAAAA,EAALvH,MAAkByF,iBAAiB,GAKxDwB,EAAiCD,EAIjCC,EAA+BD,GAIZ,SAAAQ,GAAQ,OAAAA,EAALxH,MAAkBE,WAAWuH,EAAE,IAAuB,SAAAC,GAAQ,OAAAA,EAAL1H,MACvEE,WAAWU,EAAE,GACnBsG,EAGAD,EAGAf,GAYAyB,EAAiB,SAAHC,GAAoE,IAA9DC,EAAWD,EAAXC,YAAaC,EAAUF,EAAVE,WAAYC,EAAQH,EAARG,SACjD,OACExD,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAA7G,SAAA,EACEoD,EAAAA,EAAAA,MAAC0C,EAAY,CAAA9F,SAAA,EACXqD,EAAAA,EAAAA,KAAC4C,EAAe,CACdvB,IAAG,0BAAA5F,OAA4B4H,EAAYI,cAAa,aACxDC,IAAG,GAAAjI,OAAK4H,EAAW,YAErBrD,EAAAA,EAAAA,KAAC0C,EAAsB,CAAA/F,UACrBqD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAAA,UAAoB,CAACC,MAAM,gBAAejH,SAAE0G,UAGjDrD,EAAAA,EAAAA,KAACyC,EAAY,CAAA9F,UACXqD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAAA,UAAoB,CAACC,MAAM,gBAAejH,SACxCkH,OAAOP,GAAc,EAAC,GAAA7H,QAChBqI,EAAAA,EAAAA,IAAqBR,EAAYS,EAAAA,GAAAA,iCAA2C,QAC/E,SAGR/D,EAAAA,EAAAA,KAACyC,EAAY,CAAA9F,UACXqD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAAA,UAAoB,CAACC,MAAM,gBAAejH,SAAEkH,OAAON,GAAY,EAAIA,EAAW,aAIvF,EAOMS,EAAmB,CAACC,EAAAA,GAAAA,QAAiBA,EAAAA,GAAAA,KAAcA,EAAAA,GAAAA,WACnDC,GAAoBC,EAAA,IAAAC,EAAAA,EAAAA,GAAAD,EACvBF,EAAAA,GAAAA,QAAkB,YAASG,EAAAA,EAAAA,GAAAD,EAC3BF,EAAAA,GAAAA,KAAe,SAAMG,EAAAA,EAAAA,GAAAD,EACrBF,EAAAA,GAAAA,UAAoB,aAAWE,GAGrBE,EAAe,SAAHC,GAAoD,IAADC,EAAAC,EAA7CC,EAAUH,EAAVG,WAAYxE,EAAOqE,EAAPrE,QACzCyE,GAAyCC,EAAAA,EAAAA,GAAgC,QAAnBJ,EAACE,EAAWG,eAAO,IAAAL,EAAAA,EAAI,IAA/DM,EAAaH,EAAnBI,KAER,OAFoCJ,EAAPK,SAET/E,EAAAA,EAAAA,KAACgF,GAAmB,KAGtChF,EAAAA,EAAAA,KAACW,EAAkB,CAAAhE,UACjBoD,EAAAA,EAAAA,MAACzE,EAAqB,CAAC2E,QAASA,EAAQtD,SAAA,EACtCqD,EAAAA,EAAAA,KAACiF,GAAkB,CAACR,WAAYA,KAChCzE,EAAAA,EAAAA,KAAC2C,EAAmB,CAAAhG,UAClBoD,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAA7G,SAAA,EACEoD,EAAAA,EAAAA,MAAC0C,EAAY,CAAA9F,SAAA,EACXqD,EAAAA,EAAAA,KAACkF,EAAAA,GAAkB,CAAC/E,MAAM,KAAKC,OAAO,QACtCJ,EAAAA,EAAAA,KAAC0C,EAAsB,CAAA/F,UACrBqD,EAAAA,EAAAA,KAAC2D,EAAAA,EAAAA,eAAyB,CAACC,MAAM,iBAAgBjH,SAAC,kBAGtDqD,EAAAA,EAAAA,KAACyC,EAAY,CAAA9F,SACV8H,EAAWlG,QACVwB,EAAAA,EAAAA,MAAC4D,EAAAA,EAAAA,eAAyB,CAACC,MAAM,iBAAgBjH,SAAA,EAC9CwI,EAAAA,EAAAA,IAA2BV,EAAWlG,OAAO,mBAIpDyB,EAAAA,EAAAA,KAACyC,EAAY,CAAA9F,UACXoD,EAAAA,EAAAA,MAAC4D,EAAAA,EAAAA,eAAyB,CAACC,MAAM,iBAAgBjH,SAAA,CAChB,QADgB6H,EAC9CK,EAAcO,wBAAgB,IAAAZ,OAAA,EAA9BA,EAAgCa,QAAO,SAACC,EAAKC,GAAG,OAAKD,EAAMC,EAAIC,KAAK,GAAE,GAAG,iBAG7ExB,EAAiB3D,KAAI,SAACoF,GAAY,IAADC,EAC1BrC,EAA4C,QAAjCqC,EAAGb,EAAcO,wBAAgB,IAAAM,OAAA,EAA9BA,EAAgCC,MAClD,SAACtC,GAAW,OAAKA,EAAYA,cAAgBoC,CAAM,IAErD,OAAKpC,GAIHrD,EAAAA,EAAAA,KAACmD,EAAc,CAEbE,YAAaa,EAAqBuB,GAClClC,SAAUF,EAAYmC,MACtBlC,WAAYD,EAAYuC,YAAW,oBAAAnK,OAHVgJ,EAAWG,QAAO,KAAAnJ,OAAI4H,EAAYA,cAJtD,IAUX,aAMZ,EAIMwC,GAAe,WACnB,OACE7F,EAAAA,EAAAA,KAAAwD,EAAAA,SAAA,CAAA7G,UACGmJ,EAAAA,EAAAA,GAAIC,MALoB,KAKW1F,KAAI,SAAC2F,GAAK,OAC5ChG,EAAAA,EAAAA,KAACwC,EAAmB,GAAMwD,EAAS,KAI3C,EAEMC,IAAiB7K,EAAAA,EAAAA,SAAOuI,EAAAA,EAAAA,cAAwB7H,WAAA,CAAAT,YAAA,iBAA/BD,CAA+B,iEAMhD6J,GAAqB,SAAHiB,GAA4D,IAADC,EAArD1B,EAAUyB,EAAVzB,WAC5B,OACE1E,EAAAA,EAAAA,MAACoB,EAAmB,CAACE,IAA8B,QAA3B8E,EAAE1B,EAAW2B,sBAAc,IAAAD,EAAAA,EAAI,GAAGxJ,SAAA,EACxDoD,EAAAA,EAAAA,MAAC2B,EAAgB,CAAA/E,SAAA,EACfqD,EAAAA,EAAAA,KAACgC,EAAe,CAACX,IAAKoD,EAAW4B,YACjCtG,EAAAA,EAAAA,MAAC6B,EAAuB,CAAAjF,SAAA,EACtBqD,EAAAA,EAAAA,KAACiG,GAAc,CAACrC,MAAM,yBAAyB0C,WAAW,MAAK3J,SAC5D8H,EAAW8B,OAEb9B,EAAW+B,aACVxG,EAAAA,EAAAA,KAAC2B,EAAa,CAAAhF,UACZqD,EAAAA,EAAAA,KAACyG,EAAAA,GAAY,CAACtG,MAAM,OAAOC,OAAO,kBAK1CJ,EAAAA,EAAAA,KAAC+B,EAAa,MAGpB,EAEaiD,GAAsB,SAAH0B,GAA6D,IAAvDjC,EAAUiC,EAAVjC,WACpC,OACEzE,EAAAA,EAAAA,KAACW,EAAkB,CAAAhE,UACjBoD,EAAAA,EAAAA,MAACzE,EAAqB,CAAAqB,SAAA,CACnB8H,GACCzE,EAAAA,EAAAA,KAACiF,GAAkB,CAACR,WAAYA,KAEhC1E,EAAAA,EAAAA,MAACuB,EAA0B,CAAA3E,SAAA,EACzBoD,EAAAA,EAAAA,MAAC2B,EAAgB,CAAA/E,SAAA,EACfqD,EAAAA,EAAAA,KAACoC,EAAsB,KACvBpC,EAAAA,EAAAA,KAAC6B,EAA8B,QAEjC7B,EAAAA,EAAAA,KAAC+B,EAAa,QAGlB/B,EAAAA,EAAAA,KAAC2C,EAAmB,CAAAhG,UAClBqD,EAAAA,EAAAA,KAAC6F,GAAY,UAKvB,ECjVMc,GAAkBvL,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,kJAOK,SAAAG,GAAA,IAAGC,EAAKD,EAALC,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAKtEwK,GAAexL,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,0DAUzByL,IAAmBzL,EAAAA,EAAAA,SAAOwL,IAAa9K,WAAA,CAAAT,YAAA,gBAApBD,CAAoB,kGAGvB,SAAC0L,GAAK,aAAArL,OAAYqL,EAAMC,gBAAe,QAGhD,SAAAhL,GAAQ,OAAAA,EAALP,MAAmBwL,SAAW,GAAM,EAAG,IAGjDC,IAAkB7L,EAAAA,EAAAA,SAAOwL,IAAa9K,WAAA,CAAAT,YAAA,gBAApBD,CAAoB,qBAC5B,SAAAa,GAAA,IAAGT,EAAKS,EAALT,MAAK,yBAAAC,QAA0ByL,EAAAA,EAAAA,GAAQ,GAAI1L,EAAM2L,gBAAe,qBAG7EC,GAAiBhM,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,gPAMlB,SAAAe,GAAQ,OAAAA,EAALX,MAAkB6L,QAAQ,IAIL,SAAAhL,GAAA,IAAGb,EAAKa,EAALb,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAStEkL,GAAkBlM,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,8fAUvB,SAAAsB,GAAQ,OAAAA,EAALlB,MAAkBU,WAAW,IAEJ,SAAAkF,GAAA,IAAG5F,EAAK4F,EAAL5F,MAAK,SAAAC,OAAUD,EAAME,WAAW6L,GAAE,SAKrC,SAAAjH,GAAA,IAAG9E,EAAK8E,EAAL9E,MAAK,SAAAC,OAAUD,EAAME,WAAWC,GAAE,SAKrC,SAAA+E,GAAA,IAAGlF,EAAKkF,EAALlF,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAuBtEoL,GAAuB,CAAC,8CA8D9B,GA3De,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MAEHC,GAAwBC,EAAAA,EAAAA,GALP,EAMFJ,GAAqBrK,OAChD0K,EAAAA,GAAAA,KAFM/C,KAKFgD,GAAcC,EAAAA,EAAAA,UAAQ,WAC1B,OAA0B,OAAnBJ,QAAmB,IAAnBA,OAAmB,EAAnBA,EACHK,QAAO,SAACvD,GAAU,OAAKA,EAAWG,UAAY4C,GAAqBS,SAASxD,EAAWG,QAAQ,IAChGsD,MAAM,EAboB,EAc/B,GAAG,CAACP,IAEJQ,GAAsDC,EAAAA,EAAAA,UAAS,GAAEC,GAAAvK,EAAAA,EAAAA,GAAAqK,EAAA,GAA1DG,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAC5CG,GAAoBzL,EAAAA,EAAAA,cACxB,SAACkC,GACM6I,GACLS,GAAuB,SAACzL,GAAG,OAAKO,EAAAA,EAAAA,IAAmBP,EAAMmC,EAAW6I,EAAY3K,OAAO,GACzF,GACA,CAAC2K,IAGGW,EAA8B,OAAXX,QAAW,IAAXA,OAAW,EAAXA,EAAcQ,GAEvC,OACEvI,EAAAA,EAAAA,MAAC4G,GAAe,CAAAhK,SAAA,CACb8L,EACCA,EAAiBrC,gBACfpG,EAAAA,EAAAA,KAAC6G,GAAgB,CAACE,gBAAiB0B,EAAiBrC,kBAEpDpG,EAAAA,EAAAA,KAACiH,GAAe,IAEhB,MACJlH,EAAAA,EAAAA,MAACqH,GAAc,CAAAzK,SAAA,EACboD,EAAAA,EAAAA,MAACuH,GAAe,CAAA3K,SAAA,CAAC,mBACAqD,EAAAA,EAAAA,KAAA,SAAM,oBAGtB8H,GACC9H,EAAAA,EAAAA,KAACvD,EAAQ,CAACG,YAAa0L,EAAqBzL,gBAAiB2L,EAAkB7L,SAC5EmL,EAAYzH,KAAI,SAACoE,GAAU,OAC1BzE,EAAAA,EAAAA,KAACqE,EAAY,CAEXI,WAAYA,EACZxE,QAAS,kBAAMwH,EAAS,oBAADhM,OAAqBgJ,EAAWG,SAAU,GAF5DH,EAAWG,QAGhB,OAIN5E,EAAAA,EAAAA,KAACS,EAAe,CAAA9D,UACdqD,EAAAA,EAAAA,KAACgF,GAAmB,WAMhC,E,mFC/JM0D,I,kBAAgBtN,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,iEAM1BwG,IAA0BxG,EAAAA,EAAAA,SAAOsN,IAAc5M,WAAA,CAAAT,YAAA,gBAArBD,CAAqB,gEAM/C6K,IAAiB7K,EAAAA,EAAAA,SAAOsN,IAAc5M,WAAA,CAAAT,YAAA,gBAArBD,CAAqB,sBAItCuN,IAAqBvN,EAAAA,EAAAA,SAAOuI,GAAAA,GAAAA,WAAqB7H,WAAA,CAAAT,YAAA,gBAA5BD,CAA4B,gEAKjDwN,IAA0BxN,EAAAA,EAAAA,SAAOuI,GAAAA,GAAAA,gBAA0B7H,WAAA,CAAAT,YAAA,gBAAjCD,CAAiC,0EACtD,SAAAG,GAAA,IAAGC,EAAKD,EAALC,MAAK,SAAAC,OAAUD,EAAMU,YAAW,IAMxC2M,GAAezN,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,8HAIf,SAAAW,GAAA,IAAGsF,EAAGtF,EAAHsF,IAAK7F,EAAKO,EAALP,MAAK,OAAQ6F,EAAG,OAAA5F,OAAU4F,EAAG,KAAM7F,EAAMsN,gBAAgB,IAM3EC,GAAsB3N,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,iFAE3B,SAAAa,GAAA,IAAGT,EAAKS,EAALT,MAAa,OAAAS,EAAN+M,QAAwB,EAAIxN,EAAMyN,cAAgBzN,EAAM0N,aAAa,IAMpFC,GAAe/N,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,4CAgBlBgO,GAAsB,SAAHjN,GAA8B,IAAxBkN,EAAKlN,EAALkN,MAC9BC,GAAWC,EAAAA,GAAAA,MACjB,OACExJ,EAAAA,EAAAA,MAAC6B,GAAuB,CAAAjF,SAAA,EACtBqD,EAAAA,EAAAA,KAAC6I,GAAY,CAACxH,IAAKgI,EAAMG,QACzBxJ,EAAAA,EAAAA,KAACiG,GAAc,CAAAtJ,SACZ2M,GACCtJ,EAAAA,EAAAA,KAAC4I,GAAuB,CAAAjM,SAAE0M,EAAM9C,QAEhCvG,EAAAA,EAAAA,KAAC2I,GAAkB,CAAAhM,SAAE0M,EAAM9C,SAG9B8C,EAAM7C,aACLxG,EAAAA,EAAAA,KAAA,QAAMyJ,UCjFa,6DDiFmB9M,UACpCqD,EAAAA,EAAAA,KAACyG,EAAAA,GAAY,QAKvB,EAEaiD,GAAqB,SAAHrN,GAAA,IAAMgN,EAAKhN,EAALgN,MAAK,OACxCrJ,EAAAA,EAAAA,KAAA,QAAArD,SAAO0M,EAAMA,OAAQM,EAAAA,EAAAA,IAAgBN,EAAMA,OAAS,KAAW,EAG3DO,GAAsB,SAACC,EAA4BC,EAAgBT,EAAgBU,GACvF,OAAIF,IAAiBG,EAAAA,GAAAA,IAAyBX,EAC1CU,GAAYV,EAAcU,GAAYD,EAAQG,YAAWC,EAAAA,GAAAA,aAAYb,IAAUA,QAAnF,CAGF,EAEac,GAAU,SAAHzN,GAQb,IAPL2M,EAAK3M,EAAL2M,MACAQ,EAAYnN,EAAZmN,aACAE,EAAQrN,EAARqN,SAMMK,EAAmBR,GAAoBC,GAAc,EAAOR,EAAOU,GACnEM,EAAiBD,EACnBP,IAAiBG,EAAAA,GAAAA,KACf7E,EAAAA,EAAAA,IAA2BiF,EAAiBE,YAAY,GAAO,GAAM,GAAS,QAC9EnF,EAAAA,EAAAA,IAA2BiF,GAAkB,GAAM,GAAO,GAC5D,IAGEG,GADWhB,EAAAA,GAAAA,MACgB5F,GAAAA,GAAAA,UAAuBA,GAAAA,GAAAA,YAExD,OACE3D,EAAAA,EAAAA,KAACmJ,GAAY,CAAAxM,UACXqD,EAAAA,EAAAA,KAACuK,EAAa,CAAA5N,SAAE0M,EAAQgB,EAAiB,OAG/C,EAEaG,GAAW,SAAHpJ,GAAA,IAAMiI,EAAKjI,EAALiI,MAAK,OAA0BrJ,EAAAA,EAAAA,KAAC2D,GAAAA,GAAAA,YAAsB,CAAAhH,SAAE0M,GAA+B,EAErGoB,GAAa,SAAHnK,GAQhB,IAPL+I,EAAK/I,EAAL+I,MACAQ,EAAYvJ,EAAZuJ,aACAE,EAAQzJ,EAARyJ,SAMMK,EAAmBR,GAAoBC,GAAc,EAAOR,EAAOU,GAEnEM,EAAiBD,EACnBP,IAAiBG,EAAAA,GAAAA,KACf7E,EAAAA,EAAAA,IAA2BiF,EAAiBE,YAAY,GAAO,GAAO,GAAQ,QAC9EnF,EAAAA,EAAAA,IAA2BiF,GAAkB,GAAM,GAAO,GAC5D,IAEJ,OACEpK,EAAAA,EAAAA,KAACmJ,GAAY,CAAAxM,UACXqD,EAAAA,EAAAA,KAAC2D,GAAAA,GAAAA,YAAsB,CAAAhH,SAAE0M,EAAQgB,EAAiB,OAGxD,EAEaK,GAAa,SAAHhK,GAAyE,IAAnEsI,EAAMtI,EAANsI,OAAQrM,EAAQ+D,EAAR/D,SAE7B4N,GADWhB,EAAAA,GAAAA,MACgB5F,GAAAA,GAAAA,QAAqBA,GAAAA,GAAAA,YACtD,OACE5D,EAAAA,EAAAA,MAACgJ,GAAmB,CAACC,OAAc,OAANA,QAAM,IAANA,EAAAA,EAAU,EAAErM,SAAA,EACrCqM,GAAUA,EAAS,GACnBhJ,EAAAA,EAAAA,KAAC2K,EAAAA,GAAiB,CAACxK,MAAM,OAAOC,OAAO,UAEvCJ,EAAAA,EAAAA,KAAC4K,EAAAA,GAAmB,CAACzK,MAAM,OAAOC,OAAO,UAE3CJ,EAAAA,EAAAA,KAACuK,EAAa,CAAC3G,MAAM,eAAcjH,SAAEA,GAAQ,GAAAlB,OAAOuN,EAAS1K,KAAKuM,IAAIvM,KAAKwM,MAAM9B,IAAW,EAAC,SAGnG,E,4DErKW+B,GAAY,yFAGZC,GAAQ,oDAERC,GAAK,qEACLC,GAAQ,yC,2HCabC,GAAoB/P,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,0HAKG,SAAAG,GAAA,IAAGC,EAAKD,EAALC,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAKtEgP,GAAYhQ,EAAAA,QAAAA,GAAAA,WAAS,CAAAC,YAAA,eAATD,CAAS,oEAGT,SAAAW,GAAQ,OAAAA,EAALP,MAAkB6P,iBAAiB,IAGtC,SAAApP,GAAQ,OAAAA,EAALT,MAAkB8P,mBAAmB,IAIpDC,GAAmBnQ,EAAAA,QAAAA,GAAAA,WAAS,CAAAC,YAAA,eAATD,CAAS,kBAI5BoQ,GAAepQ,EAAAA,QAAAA,GAAAA,WAAS,CAAAC,YAAA,eAATD,CAAS,gCAC1B,SAAAe,GAAW,OAAAA,EAARsP,UAAwB,kBAAsB,IAG/C,SAAApP,GAAA,IAAGb,EAAKa,EAALb,MAAe,OAAAa,EAARoP,UAAwB,YAAAhQ,OAAgBD,EAAMc,QAAQC,MAAK,IAAG,IAIxE,SAAAG,GAAA,IAAGlB,EAAKkB,EAALlB,MAAe,OAAAkB,EAAR+O,UAAwB,YAAAhQ,OAAgBD,EAAMc,QAAQoP,MAAK,IAAG,IAIxEC,GAAsBvQ,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,0EAOhCwQ,GAA6BxQ,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,+DAOvCyQ,IAAoBzQ,EAAAA,EAAAA,SAAO0G,EAAAA,GAAchG,WAAA,CAAAT,YAAA,eAArBD,CAAqB,gDAMzC0Q,IAAmB1Q,EAAAA,EAAAA,SAAO0G,EAAAA,GAAchG,WAAA,CAAAT,YAAA,eAArBD,CAAqB,8CAMxC2Q,GAAsC,GASrC,SAASC,GAAK5K,GAOF,IANjB6K,EAAO7K,EAAP6K,QACAnH,EAAI1D,EAAJ0D,KACAoH,EAAkB9K,EAAlB8K,mBACAC,EAAmB/K,EAAnB+K,oBACAC,EAAkBhL,EAAlBgL,mBACGtF,GAAKuF,EAAAA,GAAAA,GAAAjL,EAAAkL,IAEF9Q,GAAQ+Q,EAAAA,EAAAA,YACNC,GAAYC,EAAAA,GAAAA,gBAAZD,QACArM,GAAUuM,EAAAA,GAAAA,KAAVvM,MACFmJ,GAAWC,EAAAA,GAAAA,MAEjBoD,GACEC,EAAAA,GAAAA,WAAQC,EAAAA,GAAAA,GAAC,CAELZ,QAAAA,EACAnH,KAAAA,EACAgI,aAAc,CACZC,OAAQ,CACN,CACEC,MAAM,EACNC,GAAIC,GAAcC,WAIrBrG,GAELsG,GAAAA,WAfIC,EAAaV,EAAbU,cAAeC,EAAiBX,EAAjBW,kBAAmBC,EAAYZ,EAAZY,aAAcC,EAAIb,EAAJa,KAAMC,EAAUd,EAAVc,WAAYC,EAAgBf,EAAhBe,iBAAkBC,EAAchB,EAAdgB,eAkBtFlG,GAAWC,EAAAA,EAAAA,MAgBjB,OAdAxI,EAAAA,EAAAA,YAAU,WACHiB,IAEDA,GAAS3E,EAAME,WAAWU,GAC5BsR,EAAiBxB,GACR/L,GAAS3E,EAAME,WAAWC,GACnC+R,EAAiBvB,GACRhM,GAAS3E,EAAME,WAAW6L,GACnCmG,EAAiBtB,GAEjBsB,EAAiB,IAErB,GAAG,CAACvN,EAAOuN,EAAkBzB,EAASC,EAAoBC,EAAqBC,EAAoB5Q,EAAME,aAErF,IAAhBoJ,EAAK3H,QACA6C,EAAAA,EAAAA,KAAC6F,IAAYgH,EAAAA,GAAAA,GAAA,CAACU,aAAcA,EAAcI,eAAgBA,GAAoBN,OAIrFrN,EAAAA,EAAAA,KAAC4N,GAAAA,GAAU,CAAAjR,UACToD,EAAAA,EAAAA,MAAA,SAAA8M,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAWQ,KAAe,IAAE5D,UAAWoE,GAAalR,SAAA,EAClDqD,EAAAA,EAAAA,KAAA,SAAOyJ,UAAWoE,GAAalR,SAC5B4Q,EAAalN,KAAI,SAACyN,GAAW,OAC5BC,EAAAA,EAAAA,eAAA,MAAAlB,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAQiB,EAAYE,uBAAqB,IAAEC,IAAKH,EAAYb,KACzDa,EAAYI,QAAQ7N,KAAI,SAAC8N,EAAQnI,GAChC,OACE+H,EAAAA,EAAAA,eAACvC,IAAYqB,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,CACXpD,UAAWoE,IACPM,EAAOC,eAAeD,EAAOE,yBAAuB,IACxD9N,MAAO,CACL+N,UAAqB,IAAVtI,EAAc,OAAS,QAClCuI,YAAuB,IAAVvI,EAAesD,EAAW,OAAS,OAAU,GAE5DmC,SAAU0C,EAAOK,cACjBP,IAAKjI,KAELhG,EAAAA,EAAAA,KAACyO,GAAAA,EAAG,CAACC,GAAG,OAAO9K,MAAM,eAAepF,SAAS,WAAU7B,SACpDwR,EAAOQ,SACNR,EAAOS,cACL5O,EAAAA,EAAAA,KAAC6O,EAAAA,GAAc,CAACtO,MAAO,CAAEuO,UAAW,gBAAiBtQ,SAAU,eAE/DwB,EAAAA,EAAAA,KAAC6O,EAAAA,GAAc,CAACtO,MAAO,CAAEuO,UAAW,iBAAkBtQ,SAAU,cAGlE,MAGJwB,EAAAA,EAAAA,KAACyO,GAAAA,EAAG,CAACC,GAAG,OAAOH,YAAaJ,EAAOQ,SAAW,KAAO,IAAIhS,SACtDwR,EAAOY,OAAO,YAIvB,IACG,OAGT/O,EAAAA,EAAAA,KAAA,SAAA6M,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAWS,KAAmB,IAAA3Q,SAC3B6Q,EAAKnN,KAAI,SAAC2O,EAAKzR,GAGd,OAFAkQ,EAAWuB,IAGThP,EAAAA,EAAAA,KAACiP,EAAAA,GAAU,CACTC,OAAQ,CAACC,EAAAA,GAAAA,SACT5I,KAAM6I,EAAAA,GAAAA,0BACNC,WAAY,CAAEC,mBAAoBN,EAAIO,SAAS9K,WAAWG,QAAS4K,SAAUhD,GAC7EiD,QAASC,EAAAA,GAAAA,iBAAsC/S,UAG/CoR,EAAAA,EAAAA,eAAC3C,IAASyB,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GACJmC,EAAIW,eAAa,IACrB1B,IAAKe,EAAI/B,GACThN,QAAS,kBAAMwH,EAAS,oBAADhM,OAAqBuT,EAAIO,SAAS9K,WAAWG,SAAU,EAC9E,cAAY,4BAEXoK,EAAIY,MAAMvP,KAAI,SAACwP,EAAMC,GACpB,OACE/B,EAAAA,EAAAA,eAAA,MAAAlB,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,CACEpD,UDpMR,0FCqMYoG,EAAKE,gBAAc,IACvB9B,IAAK6B,EACLvP,MAAO,CACL8G,SAAwB,IAAdyI,EAAmBxG,EA5L7B,QACC,QAHR,WAiMoB,IAAdwG,GACC/P,EAAAA,EAAAA,MAACoL,GAAiB,CAAAxO,SAAA,EACd2M,IACAtJ,EAAAA,EAAAA,KAAC2D,GAAAA,GAAAA,cAAwB,CAACqM,SAAS,OAAOC,WAAW,OAAMtT,SACxDY,EAAI,IAGRsS,EAAKd,OAAO,WAGfc,EAAKd,OAAO,QAIpB,MAhCGxR,EAoCX,YAKV,CAOA,SAASsI,GAAYvF,GAAiE,IAA9DiN,EAAYjN,EAAZiN,aAAcI,EAAcrN,EAAdqN,eAAmB7G,GAAKuF,EAAAA,GAAAA,GAAA/L,EAAA4P,IAC5D,OACElQ,EAAAA,EAAAA,KAAC4N,GAAAA,GAAU,CAAAjR,UACToD,EAAAA,EAAAA,MAAA,SAAA8M,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAW/F,GAAK,IAAE2C,UAAWoE,GAAalR,SAAA,EACxCqD,EAAAA,EAAAA,KAAA,SAAOyJ,UAAWoE,GAAalR,SAC5B4Q,EAAalN,KAAI,SAACyN,GAAW,OAC5BC,EAAAA,EAAAA,eAAA,MAAAlB,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAQiB,EAAYE,uBAAqB,IAAEC,IAAKH,EAAYb,KACzDa,EAAYI,QAAQ7N,KAAI,SAAC8N,EAAQnI,GAChC,OACE+H,EAAAA,EAAAA,eAACvC,IAAYqB,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,CACXpD,UAAWoE,IACPM,EAAOC,eAAeD,EAAOE,yBAAuB,IACxD9N,MAAO,CACL+N,UAAqB,IAAVtI,EAAc,OAAS,QAClCuI,YAAuB,IAAVvI,EAAc,OAAS,GAEtCyF,SAAoB,IAAVzF,EACViI,IAAKjI,KAELhG,EAAAA,EAAAA,KAACyO,GAAAA,EAAG,CAACC,GAAG,OAAO9K,MAAM,eAAepF,SAAS,WAAU7B,SACpDwR,EAAOQ,SACNR,EAAOS,cACL5O,EAAAA,EAAAA,KAAC6O,EAAAA,GAAc,CAACtO,MAAO,CAAEuO,UAAW,gBAAiBtQ,SAAU,eAE/DwB,EAAAA,EAAAA,KAAC6O,EAAAA,GAAc,CAACtO,MAAO,CAAEuO,UAAW,iBAAkBtQ,SAAU,cAGlE,MAGJwB,EAAAA,EAAAA,KAACyO,GAAAA,EAAG,CAACC,GAAG,OAAOH,YAAaJ,EAAOQ,SAAW,KAAO,IAAIhS,SACtDwR,EAAOY,OAAO,YAIvB,IACG,OAGT/O,EAAAA,EAAAA,KAAA,SAAA6M,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAW/F,GAAK,IAAAnK,UACbmJ,EAAAA,EAAAA,GAAIC,MAAMgG,KAAsC1L,KAAI,SAAC8P,EAAGnK,GAAK,OAC5DhG,EAAAA,EAAAA,KAACuL,GAAgB,CAAA5O,UACdmJ,EAAAA,EAAAA,GAAIC,MAAM4H,EAAexQ,SAASkD,KAAI,SAAC8P,EAAGL,GACzC,OACE9P,EAAAA,EAAAA,KAAA,MAAIyJ,UAAWoE,GAAiBlR,SACf,IAAdmT,GACC/P,EAAAA,EAAAA,MAAC6L,GAA0B,CAAAjP,SAAA,EACzBqD,EAAAA,EAAAA,KAAC8L,GAAgB,KACjB9L,EAAAA,EAAAA,KAAC6L,GAAiB,KAClB7L,EAAAA,EAAAA,KAAC8B,EAAAA,EAAa,QAGhB9B,EAAAA,EAAAA,KAAC2L,GAAmB,CAAAhP,UAClBqD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAa,OATkBgO,EAc1C,KAjBqB9J,EAkBJ,YAM/B,CC3SO,IAAKkH,GAAa,SAAbA,GAAa,OAAbA,EAAa,gBAAbA,EAAa,6BAAbA,EAAa,cAAbA,EAAa,2BAAbA,EAAa,cAAbA,EAAa,cAAbA,EAAa,gBAAbA,CAAa,MAYnBkD,GAAgB,SAACvU,EAAYwU,GACjC,OAAKxU,EACAwU,EACE/R,KAAKwM,MAAU,IAAJjP,IAAeyC,KAAKwM,MAAU,IAAJuF,GAAc,GAAK,EADhD,GADC,CAGlB,EAqJA,GAnJwB,SAAH9U,GAAyF,IAAnFuJ,EAAIvJ,EAAJuJ,KAAMwL,EAAU/U,EAAV+U,WACzBC,GAAYxI,EAAAA,EAAAA,UAAQ,WACxB,OAAO,SAACyI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKjB,SAAShR,MAAM8K,MAAOoH,EAAKlB,SAAShR,MAAM8K,MACtE,CACF,GAAG,IAEGqH,GAAkB3I,EAAAA,EAAAA,UAAQ,WAC9B,OAAO,SAACyI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKjB,SAAShR,MAAMyK,OAAQyH,EAAKlB,SAAShR,MAAMyK,OACvE,CACF,GAAG,IAEG2H,GAAa5I,EAAAA,EAAAA,UAAQ,WACzB,OAAO,SAACyI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKjB,SAASqB,OAAOvH,MAAOoH,EAAKlB,SAASqB,OAAOvH,MACxE,CACF,GAAG,IAEGwH,GAAmB9I,EAAAA,EAAAA,UAAQ,WAC/B,OAAO,SAACyI,EAAkCC,GACxC,OAAOL,GAAcI,EAAKjB,SAASqB,OAAO5H,OAAQyH,EAAKlB,SAASqB,OAAO5H,OACzE,CACF,GAAG,IAEGiD,GAA2ClE,EAAAA,EAAAA,UAC/C,iBAAM,CACJ,CACE+I,OAAQ,kBACRC,SAAU,aACVC,KAAM5H,GACNoF,eAAe,GAEjB,CACEvB,GAAIC,GAAc+D,MAClBH,OAAQ5D,GAAc+D,MACtBF,SAAU,SAAAhV,GAAQ,OAAAA,EAALwC,MAAkB8K,KAAK,EACpC6H,SAAUX,EACVS,KAAM,SAAiBnB,GACrB,OACE9P,EAAAA,EAAAA,MAAAyD,EAAAA,SAAA,CAAA7G,SAAA,EACEqD,EAAAA,EAAAA,KAACmK,GAAO,CACNd,MAAOwG,EAAKb,IAAIO,SAAShR,MAAM8K,MAC/BQ,aAAcgG,EAAKb,IAAIO,SAAS1F,aAChCE,SAAU8F,EAAKb,IAAIO,SAASxF,WAE7BuG,IAAea,EAAAA,GAAAA,UACdnR,EAAAA,EAAAA,KAACoR,GAAAA,GAAU,CAAAzU,UACTqD,EAAAA,EAAAA,KAAC0K,GAAU,CAAC1B,OAAQ6G,EAAKb,IAAIO,SAAShR,MAAMyK,aAKtD,GAEF,CACEiE,GAAIC,GAAcmE,YAClBP,OAAQ5D,GAAcmE,YACtBN,SAAU,SAAA9U,GAAQ,OAAAA,EAALsC,MAAkB8K,KAAK,EACpCiI,eAAe,EACf9C,cAAe8B,IAAea,EAAAA,GAAAA,QAC9BD,SAAUR,EACVM,KAAM,SAAoBnB,GACxB,OAAOS,IAAea,EAAAA,GAAAA,SACpBnR,EAAAA,EAAAA,KAACwK,GAAQ,CAACnB,MAAM,OAEhBrJ,EAAAA,EAAAA,KAAC0K,GAAU,CAAC1B,OAAQ6G,EAAKb,IAAIO,SAAShR,MAAMyK,QAEhD,GAEF,CACEiE,GAAIC,GAAcC,OAClB2D,OAAQ5D,GAAcC,OACtB4D,SAAU,SAAA5U,GAAS,OAAAA,EAANyU,OAAoBvH,KAAK,EACtCiI,eAAe,EACfJ,SAAUP,EACVK,KAAM,SAAoBnB,GACxB,OACE7P,EAAAA,EAAAA,KAACyK,GAAU,CACTpB,MAAOwG,EAAKb,IAAIO,SAASqB,OAAOvH,MAChCQ,aAAcgG,EAAKb,IAAIO,SAAS1F,aAChCE,SAAU8F,EAAKb,IAAIO,SAASxF,UAGlC,GAEF,CACEkD,GAAIC,GAAcqE,aAClBT,OAAQ5D,GAAcqE,aACtBR,SAAU,SAAA1U,GAAS,OAAAA,EAANuU,OAAoBvH,KAAK,EACtCiI,eAAe,EACf9C,cAAe8B,IAAea,EAAAA,GAAAA,QAC9BD,SAAUL,EACVG,KAAM,SAAoBnB,GACxB,IAAQ7G,EAAW6G,EAAKb,IAAIO,SAASqB,OAA7B5H,OACR,OAAOsH,IAAea,EAAAA,GAAAA,SACpBnR,EAAAA,EAAAA,KAACwK,GAAQ,CAACnB,MAAM,MACdL,GAAUA,GAzGQ,MA0GpBjJ,EAAAA,EAAAA,MAAC2K,GAAU,CAAC1B,OAAQA,EAAOrM,SAAA,KAAAlB,OA1GP,MA0GuC,QAE3DuE,EAAAA,EAAAA,KAAC0K,GAAU,CAAC1B,OAAQA,GAExB,GAEF,CACEiE,GAAIC,GAAcsE,MAClBV,OAAQ5D,GAAcsE,MACtBT,SAAU,cACVO,eAAe,EACfN,KAAM,SAA4BnB,GAChC,OAAO7P,EAAAA,EAAAA,KAAC0J,GAAkB,CAACL,MAAO,CAAEA,MAAOwG,EAAKb,IAAIO,SAASkC,cAC/D,GAEF,CACEX,OAAQ5D,GAAcwE,OACtBX,SAAU,SAAArU,GAAS,OAAAA,EAANiV,OAAoBtI,KAAK,EACtCiI,eAAe,EACfN,KAAM,SAA4BnB,GAChC,OAAO7P,EAAAA,EAAAA,KAAC0J,GAAkB,CAACL,MAAOwG,EAAKb,IAAIO,SAASoC,QACtD,GAEH,GACD,CAACjB,EAAiBH,EAAWM,EAAkBF,EAAYL,IAE7D,OACEtQ,EAAAA,EAAAA,KAAAwD,EAAAA,SAAA,CAAA7G,UACEqD,EAAAA,EAAAA,KAACgM,GAAK,CACJE,mBAAoB,CAClBgB,GAAcsE,MACdtE,GAAcmE,YACdnE,GAAcC,OACdD,GAAcqE,aACdrE,GAAcwE,QAEhBvF,oBAAqB,CACnBe,GAAcsE,MACdtE,GAAcmE,YACdnE,GAAcqE,aACdrE,GAAcwE,QAEhBtF,mBAAoB,CAACc,GAAcsE,MAAOtE,GAAcwE,QAClD5M,KAAAA,EAAMmH,QAAAA,KAIpB,EC9JM2F,GAAsD,CAC1D,CAAEC,MAAO,KAAMxI,MAAO8H,EAAAA,GAAAA,QACtB,CAAEU,MAAO,KAAMxI,MAAO8H,EAAAA,GAAAA,WACtB,CAAEU,MAAO,KAAMxI,MAAO8H,EAAAA,GAAAA,YACtB,CAAEU,MAAO,MAAOxI,MAAO8H,EAAAA,GAAAA,UAGnBW,GAAmB1W,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,iFAIpB,SAAAG,GAAQ,OAAAA,EAALC,MAAkB6L,QAAQ,IAItCmE,GAAepQ,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,wIACpB,SAAAW,GAAQ,OAAAA,EAALP,MAAkBU,WAAW,IAKJ,SAAAD,GAAA,IAAGT,EAAKS,EAALT,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAMtE2V,GAAa3W,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,+JAMU,SAAAe,GAAA,IAAGX,EAAKW,EAALX,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAMtE4V,GAAS5W,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,uEAEH,SAAAiB,GAAQ,OAAAA,EAALb,MAAkByF,iBAAiB,IAKtDgR,GAAW7W,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,gBAAVD,CAAU,2EAGX,SAAAsB,GAAA,IAAGwV,EAAMxV,EAANwV,OAAQ1W,EAAKkB,EAALlB,MAAK,OAAQ0W,EAAS1W,EAAMgG,sBAAwB,MAAM,GAGjF2Q,GAAAA,GAGEC,IAAqBhX,EAAAA,EAAAA,SAAOuI,GAAAA,GAAAA,WAAqB7H,WAAA,CAAAT,YAAA,gBAA5BD,CAA4B,gBAC5C,SAAAgG,GAAA,IAAG5F,EAAK4F,EAAL5F,MAAa,OAAA4F,EAAN8Q,OAAuB1W,EAAMU,YAAcV,EAAM6W,aAAa,IAkBnF,IAmFA,GAnF4B,WAC1B,IAAAlK,GAAoCC,EAAAA,EAAAA,UAAqB+I,EAAAA,GAAAA,QAAkB9I,GAAAvK,EAAAA,EAAAA,GAAAqK,EAAA,GAApEmI,EAAUjI,EAAA,GAAEiK,EAAajK,EAAA,GAChCkK,GAAsCnK,EAAAA,EAAAA,WAAS,GAAKoK,GAAA1U,EAAAA,EAAAA,GAAAyU,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAaF,EAAA,GAElCG,GAA8E/K,EAAAA,EAAAA,GAC5E,IApBJ,SAA4C0I,GAC1C,OAAQA,GACN,KAAKa,EAAAA,GAAAA,OACH,OAAOtJ,EAAAA,GAAAA,IACT,KAAKsJ,EAAAA,GAAAA,UACH,OAAOtJ,EAAAA,GAAAA,KACT,KAAKsJ,EAAAA,GAAAA,WACH,OAAOtJ,EAAAA,GAAAA,MACT,KAAKsJ,EAAAA,GAAAA,QACH,OAAOtJ,EAAAA,GAAAA,IACT,QACE,OAAOA,EAAAA,GAAAA,IAEb,CAQI+K,CAAmCtC,IAFvB3I,EAAmBgL,EAAzB7N,KAAoC+N,EAA6BF,EAAtC5N,QAKrBgF,GAAa+I,EAAAA,GAAAA,UAAS,CAAC,aAAc,CAAC,IAAI,kBAAMC,EAAAA,EAAAA,KAAY,GAAE,CAC1EC,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,EAChBC,gBAAgB,MAJVrO,KAOFsO,GAA4BrL,EAAAA,EAAAA,UAAQ,WACxC,OAAK8K,GAAiClL,EAC7BA,EAAoBtH,KAAI,SAACgT,GAAC,OAAAxG,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAC5BwG,GAAC,IACJ5O,WAAY,CACV8B,KAAM8M,EAAE9M,KACRiD,KAAM6J,EAAEhN,SACRzB,QAASyO,EAAEzO,QACX4B,WAAY6M,EAAE7M,YAEhBoK,OAAQ,CACNvH,MAAOgK,EAAEzC,OACT5H,OAAQqK,EAAEC,aACVC,KAAM,OAERhV,MAAO,CACL8K,MAAOgK,EAAE9U,MACTyK,OAAQqK,EAAEG,aAEZ7B,OAAQ,CACNtI,MAAOgK,EAAE1B,QAEX8B,MAAOJ,EAAEI,MACThC,YAAa4B,EAAE5B,YACf5H,aAAc4I,EAAezI,EAAAA,GAAAA,IAAmBA,EAAAA,GAAAA,IAChDD,SAAAA,GAAQ,IAEE,EAChB,GAAG,CAACpC,EAAqBkL,EAA+BJ,EAAc1I,IAEtE,OACEhK,EAAAA,EAAAA,MAAC+R,GAAgB,CAAAnV,SAAA,EACfqD,EAAAA,EAAAA,KAACwL,GAAY,CAAA7O,SAAC,8BACdoD,EAAAA,EAAAA,MAACgS,GAAU,CAAApV,SAAA,EACTqD,EAAAA,EAAAA,KAACgS,GAAM,CAAArV,SACJiV,GAAYvR,KAAI,SAACqT,GAChB,OACE1T,EAAAA,EAAAA,KAACiS,GAAQ,CAEPC,OAAQwB,EAAWrK,QAAUiH,EAC7BrQ,QAAS,kBAAMqS,EAAcoB,EAAWrK,MAAM,EAAC1M,UAE/CqD,EAAAA,EAAAA,KAACoS,GAAkB,CAACnC,WAAW,OAAOiC,OAAQwB,EAAWrK,QAAUiH,EAAW3T,SAC3E+W,EAAW7B,SALT6B,EAAWrK,MAStB,OAEFtJ,EAAAA,EAAAA,MAACiS,GAAM,CAAC/R,QAAS,kBAAMyS,GAAeD,EAAa,EAAC9V,SAAA,EAClDqD,EAAAA,EAAAA,KAACiS,GAAQ,CAACC,OAAQO,EAAa9V,UAC7BqD,EAAAA,EAAAA,KAACoS,GAAkB,CAACnC,WAAW,OAAOiC,OAAQO,EAAa9V,SAAC,WAI9DqD,EAAAA,EAAAA,KAACiS,GAAQ,CAACC,QAASO,EAAa9V,UAC9BqD,EAAAA,EAAAA,KAACoS,GAAkB,CAACnC,WAAW,OAAOiC,QAASO,EAAa9V,SAAC,iBAMnEqD,EAAAA,EAAAA,KAAC2T,GAAe,CAAC7O,KAAMsO,EAA2B9C,WAAYA,MAGpE,EChKMwB,GAAmB1W,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAA,eAAVD,CAAU,wKAMI,SAAAG,GAAA,IAAGC,EAAKD,EAALC,MAAK,SAAAC,OAAUD,EAAME,WAAWC,GAAE,SAIrC,SAAAI,GAAA,IAAGP,EAAKO,EAALP,MAAK,SAAAC,OAAUD,EAAME,WAAWU,GAAE,SAwB5E,GAnBmB,WACjB,IAAMwX,GAAiBC,EAAAA,GAAAA,KAAO,SAACC,GAAK,OAAKA,EAAMF,cAAc,IAM7D,OAJA1U,EAAAA,EAAAA,YAAU,WACR0U,EAAe,CAAEG,aAAa,EAAOC,aAAa,GACpD,GAAG,KAGDhU,EAAAA,EAAAA,KAAAwD,EAAAA,SAAA,CAAA7G,UACEqD,EAAAA,EAAAA,KAACiU,EAAAA,GAAK,CAACC,KAAMC,EAAAA,GAAAA,iBAAoCC,qBAAmB,EAAAzX,UAClEoD,EAAAA,EAAAA,MAAC+R,GAAgB,CAAAnV,SAAA,EACfqD,EAAAA,EAAAA,KAACqU,GAAM,KACPrU,EAAAA,EAAAA,KAACsU,GAAmB,UAK9B,C","sources":["nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/CollectionTable.tsx","nft/components/explore/TrendingCollections.tsx","nft/pages/explore/index.tsx"],"sourcesContent":["import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useCollection } from 'graphql/data/nft/Collection'\nimport { UniswapMagentaIcon, VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { ethNumberStandardFormatter } from 'nft/utils'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme/components/text'\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 21px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 21px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\nconst IconContainer = styled.div`\n  display: inline;\n  vertical-align: text-bottom;\n  margin-left: 2px;\n`\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  bottom: 0px;\n  left: 0px;\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  z-index: 0;\n\n  // overlay workaround for firefox only\n  @supports (-moz-appearance: none) {\n    bottom: -1px;\n  }\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div``\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\n      theme.breakpoint.sm}px) and (max-width: 880px)) {\n    ${FirstColumnTextWrapper} {\n      display: none;\n    }\n    ${TableElement} {\n      justify-self: left !important;\n    }\n    ${CardHeaderColumn} {\n      padding: 0 20px;\n    }\n  }\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nconst MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">\n          {Number(floorInEth) > 0\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\n            : '-'}\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const { data: gqlCollection, loading } = useCollection(collection.address ?? '')\n\n  if (loading) return <LoadingCarouselCard />\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <UniswapMagentaIcon width=\"20\" height=\"20\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              {collection.floor && (\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                  {ethNumberStandardFormatter(collection.floor)} ETH Floor\n                </ThemedText.SubHeaderSmall>\n              )}\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nconst LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CollectionName = styled(ThemedText.MediumHeader)`\n  display: inline;\n  vertical-align: text-bottom;\n  line-height: 28px;\n`\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl ?? ''}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CollectionNameContainer>\n          <CollectionName color=\"accentTextLightPrimary\" fontWeight=\"500\">\n            {collection.name}\n          </CollectionName>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CollectionNameContainer>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","import { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport { calculateCardIndex } from 'nft/utils'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { opacify } from 'theme/utils'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 22px;\n  position: relative;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px;\n  }\n`\n\nconst AbsoluteFill = styled.div`\n  position: absolute;\n  top: -96px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\n// https://stackoverflow.com/a/71353198\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\n  transform: translate3d(0, 0, 0) scaleY(1.1);\n\n  background-image: ${(props) => `url(${props.backgroundImage})`};\n  filter: blur(62px);\n\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\n`\n\nconst PlainBackground = styled(AbsoluteFill)`\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: ${({ theme }) => theme.maxWidth};\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 72px;\n  line-height: 88px;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.textPrimary};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    line-height: 43px;\n    text-align: center;\n    padding-bottom: 16px;\n\n    br {\n      display: none;\n    }\n  }\n\n  /* Custom breakpoint to split into two lines on smaller screens */\n  @media only screen and (max-width: 550px) {\n    font-size: 28px;\n    line-height: 34px;\n    padding-bottom: 0;\n\n    br {\n      display: unset;\n    }\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n\n  const { data: trendingCollections } = useTrendingCollections(\n    TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n    HistoryDuration.Day\n  )\n\n  const collections = useMemo(() => {\n    return trendingCollections\n      ?.filter((collection) => collection.address && !EXCLUDED_COLLECTIONS.includes(collection.address))\n      .slice(0, TRENDING_COLLECTION_SIZE)\n  }, [trendingCollections])\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  const activeCollection = collections?.[activeCollectionIdx]\n\n  return (\n    <BannerContainer>\n      {activeCollection ? (\n        activeCollection.bannerImageUrl ? (\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\n        ) : (\n          <PlainBackground />\n        )\n      ) : null}\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. <br />\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <CarouselCard\n                key={collection.address}\n                collection={collection}\n                onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n              />\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","import { formatEther } from '@ethersproject/units'\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { Denomination } from 'nft/types'\nimport { ethNumberStandardFormatter, volumeFormatter } from 'nft/utils'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport * as styles from './Cells.css'\n\nconst TruncatedText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionNameContainer = styled(TruncatedText)`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n`\n\nconst CollectionName = styled(TruncatedText)`\n  margin-left: 8px;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => `${theme.textPrimary}`};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\n  justify-content: flex-end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  const isMobile = useIsMobile()\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        {isMobile ? (\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\n        ) : (\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n        )}\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\n)\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, true, false) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n\n  return (\n    <EthContainer>\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\n    </EthContainer>\n  )\n}\n\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\n  return (\n    <ChangeCellContainer change={change ?? 0}>\n      {!change || change > 0 ? (\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\n      ) : (\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\n      )}\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\n    </ChangeCellContainer>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var address = 'rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez4ej rgw6ez461 rgw6ez7m3 rgw6ez45p rgw6ez45v rgw6ez2dv rgw6ez2ij rgw6ezlj rgw6ez3j rgw6ez1m7 rgw6ez177';\nexport var logo = 'rgw6ez7bj';\nexport var title = 'rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez4ej rgw6ez461 rgw6ez7m3 rgw6ez45p rgw6ez45v rgw6ez2dv rgw6ez2ij';\nexport var verifiedBadge = 'rgw6ezl7 rgw6ez457 rgw6ez2o7 rgw6ez19v rgw6ez12v rgw6ez461';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var activeRow = 'rgw6ez6kp';\nexport var activityRow = '_1mor7ve3 rgw6ez48p rgw6ez3d rgw6ez3l';\nexport var loadingTd = '_1mor7veh rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez2oj rgw6ez281 rgw6ez1jp rgw6ez467 rgw6ez491';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez121 rgw6ez191 rgw6ez7b7 rgw6ez3xv rgw6ezlj';\nexport var section = '_1mor7ve1 rgw6ez2e7 rgw6ez2cs rgw6ez2jp rgw6ez2ia';\nexport var table = '_1mor7vea rgw6ez4pd rgw6ez16v rgw6ez7bj rgw6ez7a7';\nexport var td = '_1mor7vef rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez2o7 rgw6ez27p rgw6ez1jp rgw6ez467 rgw6ez491';\nexport var th = '_1mor7ved rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4ep rgw6ez2ov rgw6ez28d';\nexport var thead = 'rgw6ezrd rgw6ez50p rgw6ez7jr rgw6ez7ar';\nexport var timestamp = 'rgw6ez48p rgw6ezap rgw6ez4k1 rgw6ez3f1 rgw6ez3ax rgw6ez37v rgw6ez39l rgw6ez3hd rgw6ez3kl';","import { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { GlowEffect, ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { chainId } = useWeb3React()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <GlowEffect>\n      <table {...getTableProps()} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                    }}\n                    disabled={column.disableSortBy}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n\n            return (\n              <TraceEvent\n                events={[BrowserEvent.onClick]}\n                name={NFTEventName.NFT_TRENDING_ROW_SELECTED}\n                properties={{ collection_address: row.original.collection.address, chain_id: chainId }}\n                element={InterfaceElementName.NFT_TRENDING_ROW}\n                key={i}\n              >\n                <StyledRow\n                  {...row.getRowProps()}\n                  key={row.id}\n                  onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n                  data-testid=\"nft-trending-collection\"\n                >\n                  {row.cells.map((cell, cellIndex) => {\n                    return (\n                      <td\n                        className={styles.td}\n                        {...cell.getCellProps()}\n                        key={cellIndex}\n                        style={{\n                          maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                        }}\n                      >\n                        {cellIndex === 0 ? (\n                          <RankCellContainer>\n                            {!isMobile && (\n                              <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                                {i + 1}\n                              </ThemedText.BodySecondary>\n                            )}\n                            {cell.render('Cell')}\n                          </RankCellContainer>\n                        ) : (\n                          cell.render('Cell')\n                        )}\n                      </td>\n                    )\n                  })}\n                </StyledRow>\n              </TraceEvent>\n            )\n          })}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <GlowEffect>\n      <table {...props} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? '52px' : 0,\n                    }}\n                    disabled={index === 0}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...props}>\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n            <StyledLoadingRow key={index}>\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n                return (\n                  <td className={styles.loadingTd} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <StyledCollectionNameHolder>\n                        <StyledRankHolder />\n                        <StyledImageHolder />\n                        <LoadingBubble />\n                      </StyledCollectionNameHolder>\n                    ) : (\n                      <StyledLoadingHolder>\n                        <LoadingBubble />\n                      </StyledLoadingHolder>\n                    )}\n                  </td>\n                )\n              })}\n            </StyledLoadingRow>\n          ))}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n","import { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a?: number, b?: number): 1 | -1 => {\n  if (!a) return -1\n  if (!b) return 1\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.value, rowB.original.floor.value)\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change && change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { OpacityHoverState } from 'components/Common'\nimport { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: ${({ theme }) => theme.maxWidth};\n  padding: 0 16px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  font-weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nfunction convertTimePeriodToHistoryDuration(timePeriod: TimePeriod): HistoryDuration {\n  switch (timePeriod) {\n    case TimePeriod.OneDay:\n      return HistoryDuration.Day\n    case TimePeriod.SevenDays:\n      return HistoryDuration.Week\n    case TimePeriod.ThirtyDays:\n      return HistoryDuration.Month\n    case TimePeriod.AllTime:\n      return HistoryDuration.Max\n    default:\n      return HistoryDuration.Day\n  }\n}\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { data: trendingCollections, loading: trendingCollectionsAreLoading } = useTrendingCollections(\n    100,\n    convertTimePeriodToHistoryDuration(timePeriod)\n  )\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollectionColumns = useMemo(() => {\n    if (!trendingCollectionsAreLoading && trendingCollections) {\n      return trendingCollections.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [trendingCollections, trendingCollectionsAreLoading, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollectionColumns} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","import { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport { useBag } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport styled from 'styled-components/macro'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n\n  useEffect(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: false })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Trace page={InterfacePageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"names":["CarouselContainer","styled","componentId","CarouselCardContainer","_ref","theme","concat","breakpoint","md","CarouselItemCard","a","withConfig","_ref2","CarouselItemIcon","_ref3","textPrimary","_ref4","sm","_ref5","opacity","hover","MAX_CARD_WIDTH","Carousel","_ref6","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","arguments","length","undefined","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","_useSprings","useSprings","_useSprings2","_slicedToArray","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","stop","clearInterval","_jsxs","_jsx","onClick","ChevronLeftIcon","width","height","map","_ref8","style","ChevronRightIcon","LoadingCarousel","_ref9","CarouselCardBorder","transition","duration","fast","timing","inOut","backgroundOutline","deepShadow","CardHeaderContainer","_ref7","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","_ref10","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","_ref11","accentTextLightPrimary","_ref12","LoadingCollectionImage","_ref13","_ref14","_ref15","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","_ref16","backgroundSurface","_ref17","_ref18","xs","_ref19","MarketplaceRow","_ref20","marketplace","floorInEth","listings","_Fragment","toLowerCase","alt","ThemedText","color","Number","formatNumberOrString","NumberType","MARKETS_TO_CHECK","Markets","MARKETS_ENUM_TO_NAME","_MARKETS_ENUM_TO_NAME","_defineProperty","CarouselCard","_ref21","_collection$address","_gqlCollection$market","collection","_useCollection","useCollection","address","gqlCollection","data","loading","LoadingCarouselCard","CarouselCardHeader","UniswapMagentaIcon","ethNumberStandardFormatter","marketplaceCount","reduce","acc","cur","count","market","_gqlCollection$market2","find","floorPrice","LoadingTable","_toConsumableArray","Array","index","CollectionName","_ref22","_collection$bannerIma","bannerImageUrl","imageUrl","fontWeight","name","isVerified","VerifiedIcon","_ref23","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","maxWidth","HeaderContainer","lg","EXCLUDED_COLLECTIONS","navigate","useNavigate","trendingCollections","useTrendingCollections","HistoryDuration","collections","useMemo","filter","includes","slice","_useState","useState","_useState2","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","TruncatedText","TruncatedSubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","isMobile","useIsMobile","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","toString","TextComponent","TextCell","VolumeCell","ChangeCell","SquareArrowUpIcon","SquareArrowDownIcon","abs","round","loadingTd","table","th","thead","RankCellContainer","StyledRow","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","DEFAULT_TRENDING_TABLE_QUERY_AMOUNT","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","_objectWithoutProperties","_excluded","useTheme","chainId","useWeb3React","useWindowSize","_useTable","useTable","_objectSpread","initialState","sortBy","desc","id","ColumnHeaders","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","GlowEffect","styles","headerGroup","_createElement","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","ArrowRightIcon","transform","render","row","TraceEvent","events","BrowserEvent","NFTEventName","properties","collection_address","original","chain_id","element","InterfaceElementName","getRowProps","cells","cell","cellIndex","getCellProps","fontSize","lineHeight","_excluded2","_","compareFloats","b","timePeriod","floorSort","rowA","rowB","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","Floor","sortType","TimePeriod","MediumOnly","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","ExploreContainer","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","textSecondary","setTimePeriod","_useState3","_useState4","isEthToggled","setEthToggled","_useTrendingCollectio","convertTimePeriodToHistoryDuration","trendingCollectionsAreLoading","useQuery","fetchPrice","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","refetchInterval","trendingCollectionColumns","d","volumeChange","type","floorChange","sales","timeOption","CollectionTable","setBagExpanded","useBag","state","bagExpanded","manualClose","Trace","page","InterfacePageName","shouldLogImpression","Banner","TrendingCollections"],"sourceRoot":""}