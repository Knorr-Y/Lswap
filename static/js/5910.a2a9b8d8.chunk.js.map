{"version":3,"file":"static/js/5910.a2a9b8d8.chunk.js","mappings":"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","sources":["graphql/data/nft/NftUniversalRouterAddress.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePermit2Approval.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/ButtonStates.tsx","nft/components/bag/BagFooter.tsx","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/hooks/useBagTotalEthPrice.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/usePurchaseAssets.ts","nft/hooks/useFetchAssets.ts","nft/hooks/useTokenInput.ts"],"sourcesContent":["import gql from 'graphql-tag'\n\nimport { useNftUniversalRouterAddressQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftUniversalRouterAddress($chain: Chain = ETHEREUM) {\n    nftRoute(chain: $chain, senderAddress: \"\", nftTrades: []) {\n      toAddress\n    }\n  }\n`\n\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: 'no-cache',\n  })\n\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading,\n  }\n}\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { InterfaceTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: InterfaceTrade): {\n  mixedTokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v2TokenTradeRouteInputs?: TokenTradeRouteInput[]\n  v3TokenTradeRouteInputs?: TokenTradeRouteInput[]\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = !!trade && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, SupportedChainId, Token } from '@uniswap/sdk-core'\n// import { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { isSupportedChain } from 'constants/chains'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useCallback, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\nfunction getURAddress(chainId?: number, nftURAddress?: string) {\n  if (!chainId) return\n\n  // if mainnet and on NFT flow, use the contract address returned by GQL\n  if (chainId === SupportedChainId.MAINNET) {\n    // return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(chainId)\n    return nftURAddress ?? '0x3754c591B44de5eb07744DfeFad21819E5322CC7'\n  }\n\n  // return isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n  return isSupportedChain(chainId) ? '0x3754c591B44de5eb07744DfeFad21819E5322CC7' : undefined\n}\n\nexport default function usePermit2Approval(\n  amount: CurrencyAmount<Token> | undefined,\n  maximumAmount: CurrencyAmount<Token> | undefined,\n  nftUniversalRouterContractAddress?: string\n) {\n  const { chainId } = useWeb3React()\n\n  const universalRouterAddress = getURAddress(chainId, nftUniversalRouterContractAddress)\n  const allowanceAmount = maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined)\n  const allowance = usePermit2Allowance(allowanceAmount, universalRouterAddress)\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED)\n    setIsAllowancePending(true)\n    try {\n      await allowance.approveAndPermit()\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmount?.currency.symbol,\n        token_address: maximumAmount?.currency.address,\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setIsAllowancePending(false)\n    }\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      isApprovalLoading,\n      isAllowancePending,\n      updateAllowance,\n    }\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\n}\n","import { Percent } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components/macro'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: InterfaceTrade): PriceImpact | undefined {\n  const theme = useTheme()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.accentCritical\n        : priceImpactWarning === 'warning'\n        ? theme.accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\n        }\n      : undefined\n  }, [theme.accentCritical, theme.accentWarning, trade])\n}\n\nfunction toHumanReadablePercent(priceImpact: Percent): string {\n  const sign = priceImpact.lessThan(0) ? '+' : ''\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\n  if (exactFloat < 0.005) {\n    return '0.00%'\n  }\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\n  return `${sign}${number}%`\n}\n","import { Trans } from '@lingui/macro'\nimport { PriceImpact } from 'nft/hooks/usePriceImpact'\nimport { ReactNode } from 'react'\nimport { DefaultTheme } from 'styled-components/macro'\n\nexport enum BuyButtonStates {\n  WALLET_NOT_CONNECTED,\n  NOT_SUPPORTED_CHAIN,\n  INSUFFICIENT_BALANCE,\n  ERROR,\n  IN_WALLET_CONFIRMATION,\n  PROCESSING_TRANSACTION,\n  FETCHING_TOKEN_ROUTE,\n  INVALID_TOKEN_ROUTE,\n  NO_TOKEN_ROUTE_FOUND,\n  LOADING_ALLOWANCE,\n  IN_WALLET_ALLOWANCE_APPROVAL,\n  PROCESSING_APPROVAL,\n  REQUIRE_APPROVAL,\n  CONFIRM_UPDATED_PRICE,\n  PRICE_IMPACT_HIGH,\n  PAY,\n}\n\nexport interface BuyButtonStateData {\n  handleClick: (() => void) | (() => Promise<void>)\n  buttonText: ReactNode\n  disabled: boolean\n  warningText?: ReactNode\n  warningTextColor: string\n  helperText?: ReactNode\n  helperTextColor: string\n  buttonColor: string\n  buttonTextColor: string\n}\n\nexport function getBuyButtonStateData(\n  buyButtonState: BuyButtonStates,\n  theme: DefaultTheme,\n  handleClickOverride?: (() => void) | (() => Promise<void>),\n  usingPayWithAnyToken?: boolean,\n  priceImpact?: PriceImpact\n): BuyButtonStateData {\n  const defaultBuyButtonState: BuyButtonStateData = {\n    handleClick: () => undefined,\n    buttonText: <Trans>Something went wrong</Trans>,\n    disabled: true,\n    warningText: undefined,\n    warningTextColor: theme.accentWarning,\n    helperText: undefined,\n    helperTextColor: theme.textSecondary,\n    buttonColor: theme.accentAction,\n    buttonTextColor: theme.accentTextLightPrimary,\n  }\n\n  const buyButtonStateData: Record<BuyButtonStates, BuyButtonStateData> = {\n    [BuyButtonStates.WALLET_NOT_CONNECTED]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Connect wallet</Trans>,\n    },\n    [BuyButtonStates.NOT_SUPPORTED_CHAIN]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      buttonText: <Trans>Switch networks</Trans>,\n      disabled: false,\n      warningText: <Trans>Wrong network</Trans>,\n    },\n    [BuyButtonStates.INSUFFICIENT_BALANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n      warningText: <Trans>Insufficient funds</Trans>,\n    },\n    [BuyButtonStates.ERROR]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans>Something went wrong. Please try again.</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_CONFIRMATION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Proceed in wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_TRANSACTION]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Transaction pending</Trans>,\n    },\n    [BuyButtonStates.FETCHING_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Fetching Route</Trans>,\n    },\n    [BuyButtonStates.INVALID_TOKEN_ROUTE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.NO_TOKEN_ROUTE_FOUND]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Insufficient liquidity</Trans>,\n      buttonColor: theme.backgroundInteractive,\n      buttonTextColor: theme.textPrimary,\n      helperText: <Trans>Insufficient pool liquidity to complete transaction</Trans>,\n    },\n    [BuyButtonStates.LOADING_ALLOWANCE]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Loading Allowance</Trans>,\n    },\n    [BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approve in your wallet</Trans>,\n    },\n    [BuyButtonStates.PROCESSING_APPROVAL]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans>Approval pending</Trans>,\n    },\n    [BuyButtonStates.REQUIRE_APPROVAL]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => undefined),\n      helperText: <Trans>An approval is needed to use this token. </Trans>,\n      buttonText: <Trans>Approve</Trans>,\n    },\n    [BuyButtonStates.CONFIRM_UPDATED_PRICE]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      warningTextColor: theme.accentAction,\n      warningText: <Trans>Price updated</Trans>,\n      buttonText: <Trans>Pay</Trans>,\n    },\n    [BuyButtonStates.PRICE_IMPACT_HIGH]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans>Price impact warning</Trans>,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans>Pay Anyway</Trans>,\n    },\n    [BuyButtonStates.PAY]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => undefined),\n      disabled: false,\n      buttonText: <Trans>Pay</Trans>,\n      helperText: usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined,\n    },\n  }\n\n  return buyButtonStateData[buyButtonState]\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { isSupportedChain, SupportedChainId } from 'constants/chains'\nimport { useNftUniversalRouterAddress } from 'graphql/data/nft/NftUniversalRouterAddress'\nimport { useCurrency } from 'hooks/Tokens'\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useSwitchChain } from 'hooks/useSwitchChain'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport { useBagTotalEthPrice } from 'nft/hooks/useBagTotalEthPrice'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport { useFetchAssets } from 'nft/hooks/useFetchAssets'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useSubscribeTransactionState } from 'nft/hooks/useSubscribeTransactionState'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { shallow } from 'zustand/shallow'\n\nimport { BuyButtonStateData, BuyButtonStates, getBuyButtonStateData } from './ButtonStates'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst ActionButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency?: Currency | null\n  tradeState: TradeState\n  trade?: InterfaceTrade\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING && !trade) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.LOADING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact?: PriceImpact\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\ninterface BagFooterProps {\n  setModalIsOpen: (open: boolean) => void\n  eventProperties: Record<string, unknown>\n}\n\nexport const BagFooter = ({ setModalIsOpen, eventProperties }: BagFooterProps) => {\n  const toggleWalletDrawer = useToggleAccountDrawer()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const totalEthPrice = useBagTotalEthPrice()\n  const { inputCurrency } = useTokenInput(({ inputCurrency }) => ({ inputCurrency }), shallow)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && chainId === SupportedChainId.MAINNET\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress()\n\n  useSubscribeTransactionState(setModalIsOpen)\n  const fetchAssets = useFetchAssets()\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\n    maximumAmountIn,\n    universalRouterAddress\n  )\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const switchChain = useSwitchChain()\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo((): BuyButtonStateData => {\n    if (connected && chainId !== SupportedChainId.MAINNET) {\n      const handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick)\n    }\n\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme)\n    }\n\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme)\n    }\n\n    if (!connected) {\n      const handleClick = () => {\n        toggleWalletDrawer()\n        setBagExpanded({ bagExpanded: false })\n      }\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme)\n    }\n\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme)\n    }\n\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme)\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme)\n    }\n\n    if (allowance.state === AllowanceState.REQUIRED || loadingAllowance) {\n      const handleClick = () => updateAllowance()\n\n      if (loadingAllowance) {\n        return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick)\n      } else if (isAllowancePending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick)\n      } else if (isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick)\n      }\n\n      return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets)\n    }\n\n    if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      )\n    }\n\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken)\n  }, [\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    allowance.state,\n    loadingAllowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    connector,\n    toggleWalletDrawer,\n    setBagExpanded,\n    isAllowancePending,\n    isApprovalLoading,\n    updateAllowance,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        <FooterHeader gap=\"xs\">\n          <CurrencyRow>\n            <Column gap=\"xs\">\n              {isSupportedChain(chainId) && (\n                <>\n                  <ThemedText.SubHeaderSmall>\n                    <Trans>Pay with</Trans>\n                  </ThemedText.SubHeaderSmall>\n                  <CurrencyInput\n                    onClick={() => {\n                      if (!bagIsLocked) {\n                        setTokenSelectorOpen(true)\n                        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                      }\n                    }}\n                  >\n                    <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                    <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                      {activeCurrency?.symbol}\n                    </ThemedText.HeadlineSmall>\n                    <ChevronDown size={20} color={theme.textSecondary} />\n                  </CurrencyInput>\n                </>\n              )}\n            </Column>\n            <TotalColumn gap=\"xs\">\n              <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                <Trans>Total</Trans>\n              </ThemedText.SubHeaderSmall>\n              <InputCurrencyValue\n                usingPayWithAnyToken={usingPayWithAnyToken}\n                totalEthPrice={totalEthPrice}\n                activeCurrency={activeCurrency}\n                tradeState={tradeState}\n                trade={trade}\n              />\n            </TotalColumn>\n          </CurrencyRow>\n          <FiatValue\n            usdcValue={usdcValue}\n            priceImpact={priceImpact}\n            tradeState={tradeState}\n            usingPayWithAnyToken={usingPayWithAnyToken}\n          />\n        </FooterHeader>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            data-testid=\"nft-buy-button\"\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            $backgroundColor={buttonColor}\n            $color={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { BagStatus, TxStateType } from 'nft/types'\nimport { useEffect, useRef } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\n\nexport function useSubscribeTransactionState(setModalIsOpen: (isOpen: boolean) => void) {\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const { setBagStatus, setLocked: setBagLocked } = useBag(\n    ({ setBagExpanded, setBagStatus, setLocked }) => ({\n      setBagExpanded,\n      setBagStatus,\n      setLocked,\n    }),\n    shallow\n  )\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING)\n      } else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setBagLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current])\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade?: InterfaceTrade\n  maximumAmountIn?: CurrencyAmount<Token>\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\n  const allowedSlippage = useAutoSlippageTolerance(trade)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components/macro'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetName = '_1kuawcb rgw6ezb1 rgw6ezcv rgw6ez7m3 rgw6ez45v rgw6ez45p';\nexport var bagRow = '_1kuawc1 rgw6ez2dv rgw6ez2jd rgw6ez2oj rgw6ez281 rgw6ez4ej rgw6ez3tj rgw6ez79z rgw6ez1dv rgw6ez7bj';\nexport var bagRowImage = 'rgw6ez14d rgw6ez1bd rgw6ez49p rgw6ez7bb';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sv rgw6ezb1 rgw6ezd1 rgw6ez3xv';\nexport var collectionName = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez7m3 rgw6ez45p rgw6ez45v rgw6ez4ep';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xv';\nexport var priceChangeColumn = 'rgw6ez2p7 rgw6ez28p rgw6ezlj rgw6ezr1 rgw6ez4sj rgw6ez3t7 rgw6ez4ej rgw6ez7ab rgw6ez7jr rgw6ez547 rgw6ez5op rgw6ez1dv rgw6ez79z';\nexport var priceChangeRow = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4cd rgw6ez3sv';\nexport var unavailableAssetsContainer = 'rgw6ez2p7 rgw6ez28p rgw6ezlj rgw6ezr1 rgw6ez4sj rgw6ez3tj rgw6ez4ej rgw6ez7ab rgw6ez7jr rgw6ez547 rgw6ez60j rgw6ez5op rgw6ez1dv';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/card/icons'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice?: number\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice?: number\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components/macro'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components/macro'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { useBag, useIsMobile, useProfilePageState, useSellAsset, useSubscribeScrollState } from 'nft/hooks'\nimport { BagStatus, ProfilePageStateType } from 'nft/types'\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accentAction};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag(\n    (state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }),\n    shallow\n  )\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState()\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2ej rgw6ez2k1 rgw6ez1yv rgw6ez7nf';\nexport var bagContainer = '_1jcz50r3 rgw6ez48v rgw6ez3f7 rgw6ez3j2 rgw6ez16v rgw6ez1dv rgw6ez39p rgw6ez4pd rgw6ez7aj rgw6ez511 rgw6ez7jr rgw6ez4ej';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { BagItemStatus } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { useBag } from './useBag'\n\nexport function useBagTotalEthPrice(): BigNumber {\n  const itemsInBag = useBag((state) => state.itemsInBag)\n\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return totalEthPrice\n  }, [itemsInBag])\n}\n\nexport function useBagTotalUsdPrice(): string | undefined {\n  const totalEthPrice = useBagTotalEthPrice()\n  const defaultCurrency = useCurrency('ETH')\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n\n  const usdcValue = useStablecoinValue(parsedOutputAmount)\n\n  return useMemo(() => {\n    return usdcValue?.toExact()\n  }, [usdcValue])\n}\n","import { BagItem, BagItemStatus, BagStatus, RoutingItem, UpdatedGenieAsset } from 'nft/types'\n\nimport { compareAssetsWithTransactionRoute } from './txRoute/combineItemsWithTxRoute'\nimport { filterUpdatedAssetsByState } from './updatedAssets'\n\nexport function getPurchasableAssets(itemsInBag: BagItem[]): UpdatedGenieAsset[] {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n}\n\nfunction createBagFromUpdatedAssets(\n  unavailable: UpdatedGenieAsset[],\n  priceChanged: UpdatedGenieAsset[],\n  unchanged: UpdatedGenieAsset[]\n): BagItem[] {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE,\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED,\n    })),\n  ]\n}\n\nfunction evaluateNextBagState(\n  hasAssets: boolean,\n  shouldReview: boolean,\n  hasAssetsInReview: boolean,\n  shouldRefetchCalldata: boolean\n): BagStatus {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG\n  }\n\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW\n    }\n\n    return BagStatus.CONFIRM_REVIEW\n  }\n\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE\n  }\n\n  return BagStatus.CONFIRMING_IN_WALLET\n}\n\nexport function getNextBagState(\n  wishAssetsToBuy: UpdatedGenieAsset[],\n  route: RoutingItem[],\n  purchasingWithErc20: boolean\n): { newBagItems: BagItem[]; nextBagStatus: BagStatus } {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route)\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n\n  const hasAssets = updatedAssets.length > 0\n  const hasAssetsInReview = priceChanged.length > 0\n  const hasUnavailableAssets = unavailable.length > 0\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged)\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata)\n\n  return { newBagItems, nextBagStatus }\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { RouteResponse, UpdatedGenieAsset } from 'nft/types'\nimport { useCallback } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { useSendTransaction } from './useSendTransaction'\nimport { useTransactionResponse } from './useTransactionResponse'\n\nexport function usePurchaseAssets(): (\n  routingData: RouteResponse,\n  assetsToBuy: UpdatedGenieAsset[],\n  purchasingWithErc20?: boolean\n) => Promise<void> {\n  const { provider } = useWeb3React()\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse)\n\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag,\n  } = useBag(\n    ({ setLocked, setBagExpanded, reset }) => ({\n      setLocked,\n      setBagExpanded,\n      reset,\n    }),\n    shallow\n  )\n\n  return useCallback(\n    async (routingData: RouteResponse, assetsToBuy: UpdatedGenieAsset[], purchasingWithErc20 = false) => {\n      if (!provider) return\n\n      const purchaseResponse = await sendTransaction(\n        provider.getSigner(),\n        assetsToBuy,\n        routingData,\n        purchasingWithErc20\n      )\n\n      if (purchaseResponse) {\n        setBagLocked(false)\n        setTransactionResponse(purchaseResponse)\n        setBagExpanded({ bagExpanded: false })\n        resetBag()\n      }\n    },\n    [provider, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  )\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { BagStatus, GenieAsset } from 'nft/types'\nimport {\n  buildNftTradeInput,\n  buildNftTradeInputFromBagItems,\n  filterUpdatedAssetsByState,\n  recalculateBagUsingPooledAssets,\n} from 'nft/utils'\nimport { getNextBagState, getPurchasableAssets } from 'nft/utils/bag'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { compareAssetsWithTransactionRoute } from 'nft/utils/txRoute/combineItemsWithTxRoute'\nimport { useCallback, useMemo, useState } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nimport { useBag } from './useBag'\nimport { usePurchaseAssets } from './usePurchaseAssets'\nimport { useTokenInput } from './useTokenInput'\n\nexport function useFetchAssets(): () => Promise<void> {\n  const { account } = useWeb3React()\n\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag,\n  } = useBag(\n    ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }) => ({\n      itemsInBag,\n      setBagStatus,\n      didOpenUnavailableAssets,\n      setDidOpenUnavailableAssets,\n      isLocked,\n      setLocked,\n      setItemsInBag,\n    }),\n    shallow\n  )\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setBagLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets])\n\n  return useCallback(async () => {\n    resetStateBeforeFetch()\n\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account ? account : '',\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n          setBagLocked(false)\n          return\n        }\n\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag)\n        const purchasingWithErc20 = !!tokenTradeInput\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20)\n\n        setItemsInBag(newBagItems)\n        setBagStatus(nextBagStatus)\n\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20)\n          setBagLocked(true)\n          return\n        }\n\n        setBagLocked(false)\n      },\n    })\n  }, [\n    account,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput,\n  ])\n}\n\nexport const useBuyAssetCallback = () => {\n  const { account } = useWeb3React()\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n  const purchaseAssets = usePurchaseAssets()\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const fetchAndPurchaseSingleAsset = useCallback(\n    async (asset: GenieAsset) => {\n      setIsLoading(true)\n\n      fetchGqlRoute({\n        variables: {\n          senderAddress: account ? account : '',\n          nftTrades: buildNftTradeInput([asset]),\n          tokenTrades: undefined,\n        },\n        pollInterval: 0,\n        fetchPolicy: 'no-cache',\n        onCompleted: (data) => {\n          setIsLoading(false)\n\n          if (!data.nftRoute || !data.nftRoute.route) {\n            return\n          }\n\n          const { route, routeResponse } = buildRouteResponse(data.nftRoute, false)\n          const { updatedAssets } = compareAssetsWithTransactionRoute([asset], route)\n          const { priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets)\n          const invalidData = priceChanged.length > 0 || unavailable.length > 0\n\n          if (invalidData) {\n            return\n          }\n\n          purchaseAssets(routeResponse, updatedAssets, false)\n        },\n      })\n    },\n    [account, fetchGqlRoute, purchaseAssets]\n  )\n\n  return useMemo(() => ({ fetchAndPurchaseSingleAsset, isLoading }), [fetchAndPurchaseSingleAsset, isLoading])\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency?: Currency\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput?: TokenTradeInput\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n"],"names":["gql","_templateObject","_taggedTemplateLiteral","buildTradeRouteInput","swap","_objectSpread","inputAmount","amount","swapAmounts","outputAmount","quotient","toString","token","address","currency","isToken","chainId","decimals","isNative","pools","route","map","pool","isPool","pair","undefined","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","setTokenTradeInput","useTokenInput","state","hasRoutes","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","_buildAllTradeRouteIn","_step","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","_iterator","_createForOfIteratorHelper","s","n","done","value","protocol","Protocol","push","err","e","f","length","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePermit2Approval","maximumAmount","nftUniversalRouterContractAddress","useWeb3React","universalRouterAddress","nftURAddress","SupportedChainId","isSupportedChain","getURAddress","allowanceAmount","usePermit2Allowance","isApprovalLoading","AllowanceState","_useState","useState","_useState2","_slicedToArray","isAllowancePending","setIsAllowancePending","updateAllowance","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","invariant","approveAndPermit","sendAnalyticsEvent","InterfaceEventName","chain_id","token_symbol","symbol","token_address","t0","console","error","finish","stop","useMemo","usePriceImpact","theme","useTheme","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","accentWarning","priceImpactSeverity","type","color","displayPercentage","priceImpact","_priceImpact$multiply","sign","lessThan","Number","numerator","denominator","number","parseFloat","toFixed","concat","toHumanReadablePercent","BuyButtonStates","getBuyButtonStateData","buyButtonState","handleClickOverride","usingPayWithAnyToken","_buyButtonStateData","defaultBuyButtonState","handleClick","buttonText","_jsx","Trans","id","disabled","warningText","warningTextColor","helperText","helperTextColor","textSecondary","buttonColor","accentAction","buttonTextColor","accentTextLightPrimary","_defineProperty","WALLET_NOT_CONNECTED","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","IN_WALLET_CONFIRMATION","PROCESSING_TRANSACTION","FETCHING_TOKEN_ROUTE","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","backgroundInteractive","textPrimary","LOADING_ALLOWANCE","IN_WALLET_ALLOWANCE_APPROVAL","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","PAY","FooterContainer","styled","componentId","Footer","_ref","backgroundOutline","_ref2","FooterHeader","Column","withConfig","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","_ref3","$color","HelperText","_ref4","CurrencyInput","ActionButton","_ref5","$backgroundColor","_ref6","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","_ref7","children","_jsxs","fontSize","lineHeight","Helper","_ref8","InputCurrencyValue","_ref9","_activeCurrency$symbo","totalEthPrice","activeCurrency","tradeState","TradeState","ethNumberStandardFormatter","toExact","fontWeight","formatWeiToDecimal","FiatValue","_ref10","usdcValue","_Fragment","MouseoverTooltip","text","i18n","size","style","values","0","PENDING_BAG_STATUSES","BagStatus","BagFooter","_ref11","setModalIsOpen","eventProperties","toggleWalletDrawer","useToggleAccountDrawer","_useWeb3React","account","connector","connected","Boolean","useBagTotalEthPrice","inputCurrency","_ref12","shallow","setInputCurrency","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","_useBag","useBag","_ref13","isLocked","bagStatus","setBagExpanded","setBagStatus","bagIsLocked","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","_useNftUniversalRoute","_data$nftRoute","useNftUniversalRouterAddressQuery","fetchPolicy","data","loading","nftRoute","toAddress","universalRouterAddressIsLoading","useNftUniversalRouterAddress","transactionState","useSendTransaction","setTransactionState","setState","transactionStateRef","useRef","setLocked","setBagLocked","current","TxStateType","useSubscribeTransactionState","fetchAssets","useFetchAssets","parsedOutputAmount","tryParseCurrencyAmount","formatEther","_useDerivedPayWithAny","_useBestTrade","useBestTrade","TradeType","useAutoSlippageTolerance","maximumAmountIn","useDerivedPayWithAnyTokenSwapInfo","_usePermit2Approval","loadingAllowance","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balanceInEth","useWalletBalance","balance","sufficientBalance","parseEther","gte","switchChain","useSwitchChain","_useMemo","bagExpanded","traceEventProperties","usd_value","using_erc20","gap","onClick","NFTEventName","CurrencyLogo","ChevronDown","marginBottom","TraceEvent","events","BrowserEvent","name","element","InterfaceElementName","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","selectedCurrency","onlyShowCurrenciesWithBalance","dash","keyframes","Circle","TimedLoader","Box","display","position","height","width","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","BagRow","_asset$name","asset","usdPrice","removeAsset","showRemove","grayscale","isMobile","loadedImage","setImageLoaded","_useState3","smallImageUrl","_useState4","noImageAvailable","setNoImageAvailable","_useState5","_useState6","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","ETHPrice","priceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","preventDefault","stopPropagation","Link","to","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","as","src","alt","clsx","onLoad","onError","visibility","loadingBlock","overflow","whiteSpace","tokenId","susFlag","Suspicious","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","_asset$updatedPriceIn","markAssetAsReviewed","isPriceIncrease","BigNumber","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","_useReducer","useReducer","_useReducer2","toggleOpen","_useState7","_useState8","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","BagContent","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","useIsMobile","recalculateBagUsingPooledAssets","fetchedPriceData","useQuery","fetchPrice","unchangedAssets","filter","item","status","BagItemStatus","priceChangedAssets","unavailableAssets","availableItems","hasAssetsInReview","hasAssets","bag_quantity","formatAssetEventProperties","Trace","reverse","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","BagCloseIcon","StyledColumn","useIsNftProfilePage","Center","LargeTagIcon","themeVars","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","backgroundSurface","shallowShadow","raiseZIndex","Z_INDEX","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","medium","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","_useSellAsset","resetSellAssets","reset","setProfilePageState","useProfilePageState","toggleBag","_ref14","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isModalOpen","_useSubscribeScrollSt","useSubscribeScrollState","userCanScroll","scrollRef","scrollProgress","scrollHandler","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","list_quantity","collection_addresses","token_ids","Overlay","reduce","total","add","useBagTotalUsdPrice","getPurchasableAssets","getNextBagState","wishAssetsToBuy","purchasingWithErc20","_compareAssetsWithTra","compareAssetsWithTransactionRoute","hasPriceAdjustment","updatedAssets","shouldRefetchCalldata","_filterUpdatedAssetsB","filterUpdatedAssetsByState","unchanged","priceChanged","unavailable","hasUnavailableAssets","shouldReview","newBagItems","_toConsumableArray","unavailableAsset","changedAsset","unchangedAsset","createBagFromUpdatedAssets","nextBagStatus","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","marketplace","toLowerCase","amountIn","price","assetIn","baseAsset","basePrice","baseDecimals","amountOut","assetOut","contractAddress","tokenType","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","sendAmount","calldata","usePurchaseAssets","provider","sendTransaction","setTransactionResponse","useTransactionResponse","resetBag","routingData","assetsToBuy","purchaseResponse","_args","arguments","abrupt","getSigner","sent","_x","_x2","apply","tokenTradeInput","_useNftRouteLazyQuery","useNftRouteLazyQuery","fetchGqlRoute","purchaseAssets","resetStateBeforeFetch","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","_buildRouteResponse","_getNextBagState","useBuyAssetCallback","_useNftRouteLazyQuery3","isLoading","setIsLoading","fetchAndPurchaseSingleAsset","_callee2","_context2","buildNftTradeInput","pollInterval","_buildRouteResponse2","create","devtools","set","clearInputCurrency"],"sourceRoot":""}